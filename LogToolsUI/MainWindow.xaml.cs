using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using LogToolsUI.DataMode;
using LogToolsUI.Views;

namespace LogToolsUI
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        DataTable CurrentTable = new DataTable();

        public MainWindow() => InitializeComponent();

        private void Txt_TextChanged(object sender, TextChangedEventArgs e) => Console.WriteLine(txt.Text);

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            var slectStrs = txt.Text.Split('&');
            if (dataGrid.DataContext is DataTable table)
            {
                foreach (string selectStr in slectStrs)
                {
                    dataGrid.DataContext = SelectTable(table, selectStr);
                }
            }
        }

        private void Button_Click_1(object sender, RoutedEventArgs e) => dataGrid.DataContext = CurrentTable;

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            var dialog = new Microsoft.Win32.OpenFileDialog();
            dialog.Multiselect = true;
            dialog.Title = "请选择文件夹";
            dialog.Filter = "文本文件(*.txt)|*.txt";
            if (dialog.ShowDialog() == true)
            {
                txtBox.Text = string.Format(" 已选择{0}个日志", dialog.FileNames.Count());
                listBox.ItemsSource = dialog.FileNames.Select(it => new PathMode(it.Split('\\').LastOrDefault()) { Path = it });
            }
        }
        private void ListBox_OnSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.AddedItems.Count>0 && e.AddedItems[0] is PathMode pathm )
                SetDataGridItemSourceAsync(pathm.Path);
        }
        async void SetDataGridItemSourceAsync(string path)
        {
            var table = await Task.Run(new Func<DataTable>(() => LogMoudle.GetTableByPath(path)));
            txtBox.Text = string.Format(" 当前日志名称 ：{0}", path.Split('\\').LastOrDefault());
            dataGrid.DataContext = table;
            CurrentTable = table;
        }
        DataTable SelectTable(DataTable table, string SelectStr)
        {
            try
            {
                var ctable = table.Clone();
                var rows = table.Select(SelectStr);
                foreach (var row in rows)
                {
                    ctable.Rows.Add(row.ItemArray);
                }
                return ctable;
            }
            catch (Exception)
            {
                MessageBox.Show("输入字段错误");
                return table;
            }

        }

        private void DataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (var item in dataGrid.Columns)
            {
                if (item.Header is String str && str == "JsonMsg" && grid.Resources["jsonCell"] is Style cellStyle && cellStyle != null)
                {
                    item.CellStyle = cellStyle;
                    break;
                }
            }
        }

        private void MenuItem_Click(object sender, RoutedEventArgs e)
        {
            if (sender is MenuItem item && item.Tag is string Str)
            {
                new JsonWindow() { DataContext=new JsonWindowDataMode(Str) }.Show();
                //System.IO.File.OpenRead(@"",)
            }
        }
    }
}
